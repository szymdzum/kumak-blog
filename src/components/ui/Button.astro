---
/**
 * Button component that can render either as a button element or an anchor tag
 * @component
 */
interface Props {
  /** URL for anchor tag rendering. If provided, component renders as <a>, otherwise as <button> */
  href?: string;
  /** Visual style variant of the button */
  variant?: "primary" | "secondary" | "outline";
  /** Size variant affecting padding and font size */
  size?: "sm" | "md" | "lg";
  /** HTML button type attribute. Only applies when rendering as <button> */
  type?: "button" | "submit" | "reset";
  /** Additional CSS classes to apply to the button */
  class?: string;
}

const {
  href,
  variant = "primary",
  size = "md",
  type = "button",
  class: className = "",
} = Astro.props;
---

{
  href ? (
    <a href={href} class:list={["button", variant, size, className]}>
      <slot />
    </a>
  ) : (
    <button type={type} class:list={["button", variant, size, className]}>
      <slot />
    </button>
  )
}

<style>
  .button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-weight: var(--font-weight-medium);
    border-radius: var(--radius);
    text-decoration: none;
    white-space: nowrap;
    transition: all 0.2s ease;
    border: 1px solid transparent;
    gap: var(--s1);
  }

  /* Size variants */
  .sm {
    height: var(--button-height-sm, 2rem);
    padding-inline: var(--s1);
    font-size: var(--text-sm);
  }

  .md {
    height: var(--button-height-md, 2.5rem);
    padding-inline: var(--s2);
    font-size: var(--text-base);
  }

  .lg {
    height: var(--button-height-lg, 3rem);
    padding-inline: var(--s3);
    font-size: var(--text-lg);
  }

  /* Style variants */
  .primary {
    background-color: var(--color-primary);
    color: white;
  }

  .primary:hover {
    background-color: var(--color-primary-dark);
  }

  .secondary {
    background-color: var(--color-secondary, #f3f4f6);
    color: var(--color-text);
  }

  .secondary:hover {
    background-color: var(--color-secondary-dark, #e5e7eb);
  }

  .outline {
    background-color: transparent;
    border-color: var(--color-border);
    color: inherit;
  }

  .outline:hover {
    background-color: rgba(var(--foreground-rgb), 0.05);
    border-color: var(--color-border-hover);
  }
</style>
