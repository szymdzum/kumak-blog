---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import PostCard from "./PostCard.astro";
import {
  PostsManager,
  PostQueries,
  type SortOption,
} from "../utils/postSorter";

interface Props {
  sortBy?: SortOption;
  limit?: number;
  featured?: boolean;
  tags?: string[];
  preset?: "latest" | "featured" | "updated";
}

const {
  sortBy = PostQueries.SORT.NEWEST_FIRST,
  limit = PostQueries.LIMIT.THREE,
  featured = false,
  tags,
  preset,
} = Astro.props;

// Get all blog posts
const allPosts = await getCollection("blog");

// Use preset method if specified
let posts: CollectionEntry<"blog">[];

if (preset) {
  switch (preset) {
    case "latest":
      posts = PostsManager.getLatest(allPosts, limit);
      break;
    case "featured":
      posts = PostsManager.getFeatured(allPosts, limit);
      break;
    case "updated":
      posts = PostsManager.getRecentlyUpdated(allPosts, limit);
      break;
    default:
      posts = [];
  }
} else {
  // Use manual configuration
  posts = new PostsManager(allPosts)
    .filter(featured ? PostQueries.FILTER.FEATURED : PostQueries.FILTER.ALL)
    .filterByTags(tags || [])
    .sort(sortBy)
    .limit(limit)
    .get();
}

// Alternative one-line approach using static query method:
// const posts = PostsManager.query(allPosts, {
//   filter: featured ? 'featured' : 'all',
//   tags,
//   sortBy,
//   limit
// });
---

<div class="featured-posts">
  {posts.map((post: CollectionEntry<"blog">) => <PostCard post={post} />)}
</div>

<style>
  .section-title {
    font-size: var(--s2, 1.75rem);
    font-weight: 700;
    margin-bottom: var(--s2, 2rem);
    text-align: center;
  }

  .featured-posts {
    margin: var(--s2, 2rem) auto 0;
    max-width: 64rem; /* 4xl */
    display: grid;
    gap: var(--s2, 2rem);
  }

  @media (min-width: 768px) {
    .featured-posts {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }
  }
</style>
