---
description: 
globs: 
alwaysApply: true
---

# CSS Framework Guidelines: The Power of Exception-Based Styling

# See also
- [astro.mdc](mdc:astro.mdc)
- [main.mdc](mdc:main.mdc)
- [index.mdc](mdc:index.mdc)

## Core Philosophy

Our CSS framework follows the principle of **exception-based styling**. We set global defaults first, then handle exceptions where needed. This approach is more efficient, maintainable, and resilient than styling each element individually.

## Fundamental Rules

### 1. Start with Global Defaults

Set default styles that apply to all relevant elements. Define these global rules using type selectors, universal selectors, or inheritance.

```css
/* Apply a reasonable measure to all elements by default */
* {
  max-width: 60ch;
}

/* Set sensible typography defaults that cascade down */
:root {
  font-family: system-ui, sans-serif;
  line-height: 1.5;
}
```

### 2. Define Exceptions, Not Rules

Rather than manually applying styles to each element that should follow a pattern, identify and style only the exceptions that should deviate from your global defaults.

```css
/* Define the global rule */
* {
  max-width: 60ch;
}

/* Then specify the exceptions */
html,
body,
div,
header,
nav,
main,
footer {
  max-width: none;
}
```

### 3. Use Harmonious Proportions, Not Fixed Values

Create visual harmony through proportional relationships rather than arbitrary fixed values. Base your design system on a modular scale derived from your typography.

```css
:root {
  /* Base the scale on a meaningful ratio like 1.5 */
  --ratio: 1.5;

  /* Create a modular scale using this ratio */
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));

  /* Negative scale for smaller values */
  --s-1: calc(var(--s0) / var(--ratio));
  --s-2: calc(var(--s-1) / var(--ratio));
}
```

Use these proportional values for spacing, padding, margins, and other dimensions to maintain consistent rhythm throughout your design:

```css
.stack > * + * {
  margin-top: var(--s1);
}

.box {
  padding: var(--s1);
}

h1 { font-size: var(--s3); }
h2 { font-size: var(--s2); }
h3 { font-size: var(--s1); }
```

### 4. Avoid Precise Pixel Values

Resist the urge to convert between units precisely. Browsers handle subpixel rendering automatically:

```css
/* Preferred: Simple proportional values */
h2 { font-size: 1.5rem; }

/* Avoid: Precise pixel conversion */
h2 { font-size: 1.43rem; /* exactly 23px if base is 16px */ }
```

### 5. Leverage the Cascade Intentionally

Use the natural cascade and specificity of CSS to your advantage. Place more general styles earlier in your stylesheet and more specific exceptions later.

### 6. Consider Selectors Carefully

- Use type selectors for default element styling
- Use class selectors for reusable patterns
- Use attribute selectors for state variations
- Use the universal selector (*) for truly global properties

### 7. Promote Resilience Through Inheritance

Utilize CSS inheritance to propagate properties that should be consistent (e.g., typography, colors) and only override them when necessary.

```css
.box {
  background-color: var(--color-light);
  color: var(--color-dark);
}

.box * {
  color: inherit; /* Ensures all text inside boxes inherits color */
}

.box.invert {
  background-color: var(--color-dark);
  color: var(--color-light);
}
```

### 8. Enforce Consistency with Custom Properties

Define custom properties at the root level and use them throughout your styles to maintain consistency and make global changes easier.

```css
:root {
  --measure: 60ch;
  --s1: 1rem;
  --border-thin: 1px;
}
```

### 9. Write Self-Documenting CSS

Name classes and custom properties clearly to indicate their purpose. Your CSS should explain why certain exceptions exist.

## Implementation Approach

1. **Begin with reset/normalize styles** that create a consistent baseline
2. **Define global typographic styles** that cascade throughout the document
3. **Create layout primitives** that handle common structural patterns
4. **Apply component-specific styles** only where layout primitives need enhancement
5. **Add utility classes sparingly** for one-off adjustments

## Benefits

- **Reduced CSS volume** - Write fewer rules by styling exceptions rather than every case
- **Improved maintainability** - Changes to global styles cascade properly
- **Better resilience** - Elements naturally inherit appropriate styles
- **Cleaner HTML** - Markup remains free of unnecessary utility classes
- **Fewer bugs** - Less chance of forgetting to style an element

By following an exception-based approach with harmonious proportions, we create a CSS system that aligns with the cascade's natural strengths, resulting in more elegant, efficient, and maintainable code.

---
## Rule Validation: August 2024

Upon thorough review of the codebase as of August 2024, it is confirmed that all CSS rules and guiding principles documented herein are faithfully observed throughout the project. The following points are affirmed:

- Exception-based styling is rigorously applied, with global defaults established and exceptions handled judiciously in `typography.css` and related files.
- Proportional values, custom properties, and minimal utility classes are consistently employed, in harmony with the prescribed methodology.
- Heading elements (h1â€“h6) are globally styled in accordance with the rules, and no unauthorized frameworks or preprocessors are present.
- The CSS is self-documenting, well-commented, and organized, upholding the highest standards of maintainability and clarity.
- No evidence of rule drift or deviation from the established philosophy has been detected.

Should a monochrome gradient for headings be introduced in the future, it must be documented as an explicit exception, in keeping with the spirit and letter of this framework.

Thus, no amendments to these rules are warranted at this time.

---
## CSS File Map and Structure (August 2024)

This project uses a layered, modular CSS architecture. The following files are present in `src/styles/` and imported via `main.css`:

- **main.css**: Entry point. Imports all foundational CSS files.
- **reset.css**: CSS reset and normalization. Removes default browser styles, sets box-sizing, improves accessibility and text/media rendering.
- **variables.css**: Design tokens and custom properties for colors, spacing, font sizes, radii, shadows, transitions, etc. Modular scale and theme variables (dark by default).
- **typography.css**: Global typographic rules for html, body, headings, paragraphs, lists, blockquotes, code, images, etc. Uses variables from `variables.css`. Focuses on semantic, readable, and accessible typography.
- **layout.css**: Layout utilities and primitives: flexbox, centering, section/container sizing, stack spacing, box, and visually hidden (`.sr-only`). Applies to body, main, section, footer, and utility classes.
- **pretty-code.css**: Styles for code blocks, highlighted lines/words, and copy button in code samples. Used for syntax highlighting and code presentation.

**Best Practices for Extending/Modifying CSS:**
- Most typographic and layout needs are covered globally in `typography.css` and `layout.css`.
- Blog post/article-specific tweaks should be added to `typography.css` unless they are truly unique to a single page/component.
- Use and extend custom properties from `variables.css` for consistency.
- Only add new utility classes or exceptions when global rules are insufficient.

**Model Guidance:**
- Always check this rule for guidance on CSS structure, file locations, and best practices before making or suggesting CSS changes.
- When in doubt, prefer extending global styles over adding new local/component styles.

# Global vs. Component-Scoped Styles: Policy

## When to Use Global Styles
- Use global styles for typography, layout primitives, color schemes, and spacing tokens that should apply project-wide.
- Extend or override global styles in `typography.css`, `layout.css`, or other global CSS files for consistency.
- Prefer global styles for elements that appear on multiple pages or across the site.

## When to Use Component-Scoped Styles
- Use component-scoped styles for unique visual treatments or layout needs specific to a single component.
- Isolate styles that should not affect or be affected by other components.
- Use component-scoped styles for interactive or feature-specific UI islands.

## Best Practices
- Always use CSS custom properties (design tokens) for colors, spacing, and sizing, even in component-scoped styles, to maintain consistency.
- Use proportional values (e.g., `var(--s1)`, `1.5rem`) instead of hardcoded pixel values whenever possible.
- If a style is repeated in more than one component, consider moving it to a global stylesheet.

## Conflict Resolution
- If a rule in a global stylesheet conflicts with a component-scoped style, the component-scoped style should take precedence for that component only.
- In case of ambiguity, prefer extending global styles rather than duplicating them locally.
- If a contradiction cannot be resolved by scope, escalate to the project maintainer for a decision and document the outcome in this section.