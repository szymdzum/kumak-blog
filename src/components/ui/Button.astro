---
/**
 * Button component that can render either as a button element or an anchor tag
 * @component
 */
interface Props {
  /** URL for anchor tag rendering. If provided, component renders as <a>, otherwise as <button> */
  href?: string;
  /** Visual style variant of the button */
  variant?: "primary" | "secondary" | "outline" | "funky" | "mono";
  /** Size variant affecting padding and font size */
  size?: "sm" | "md" | "lg";
  /** HTML button type attribute. Only applies when rendering as <button> */
  type?: "button" | "submit" | "reset";
  /** Additional CSS classes to apply to the button */
  class?: string;
}

const {
  href,
  variant = "mono",
  size = "md",
  type = "button",
  class: className = "",
} = Astro.props;
---

{
  href ? (
    <a href={href} class:list={["button", variant, size, className]}>
      <slot />
    </a>
  ) : (
    <button type={type} class:list={["button", variant, size, className]}>
      <slot />
    </button>
  )
}

<style>
  .button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-weight: var(--font-weight-medium);
    border-radius: var(--radius);
    text-decoration: none;
    white-space: nowrap;
    border: 1px solid transparent;
    position: relative;
    overflow: hidden;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .button::after {
    content: "";
    position: absolute;
    inset: 0;
    z-index: -1;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    background: radial-gradient(
      circle at center,
      rgba(var(--foreground-rgb, 0, 0, 0), 0.1) 0%,
      transparent 70%
    );
  }

  .button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .button:hover::after {
    opacity: 1;
  }

  .button:active {
    transform: translateY(0);
  }

  /* Size variants */
  .sm {
    height: var(--button-height-sm, 2rem);
    padding-inline: var(--s1);
    font-size: var(--text-sm);
  }

  .md {
    height: var(--button-height-md, 2.5rem);
    padding-inline: var(--s2);
    font-size: var(--text-base);
  }

  .lg {
    height: var(--button-height-lg, 3rem);
    padding-inline: var(--s3);
    font-size: var(--text-lg);
  }

  /* Style variants */
  .primary {
    background-color: var(--color-primary);
    color: white;
  }

  .primary:hover {
    background-color: var(--color-primary-dark);
    box-shadow: 0 6px 16px rgba(var(--color-primary-rgb, 59, 130, 246), 0.3);
  }

  .secondary {
    background-color: var(--color-secondary, #f3f4f6);
    color: var(--color-text);
  }

  .secondary:hover {
    background-color: var(--color-secondary-dark, #e5e7eb);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
  }

  .outline {
    background-color: transparent;
    border-color: var(--color-border);
    color: inherit;
    backdrop-filter: blur(8px);
  }

  .outline:hover {
    background-color: rgba(var(--foreground-rgb), 0.05);
    border-color: var(--color-border-hover);
    box-shadow:
      0 6px 16px rgba(var(--foreground-rgb), 0.08),
      inset 0 0 0 1px rgba(var(--foreground-rgb), 0.1);
  }

  /* Monochromatic variant */
  .mono {
    background: linear-gradient(
      135deg,
      rgba(220, 220, 220, 0.9) 0%,
      rgba(180, 180, 180, 0.8) 100%
    );
    color: rgba(30, 30, 30, 0.9);
    border: none;
    position: relative;
    overflow: hidden;
  }

  .mono:hover {
    background: linear-gradient(
      135deg,
      rgba(240, 240, 240, 1) 0%,
      rgba(200, 200, 200, 0.9) 100%
    );
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
</style>
