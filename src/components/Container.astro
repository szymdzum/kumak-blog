---
interface Props {
  layout?: "row" | "column";
  as?: keyof HTMLElementTagNameMap;  // Change type to be more specific
  class?: string;
}

const {
  layout = "row",
  as = "div",
  class: className = "",
}: Props = Astro.props;

// Create the class string
const classNames = `container ${layout === "row" ? "row" : "column"} ${className}`.trim();
---

{as === "div" && <div class={classNames}><slot /></div>}
{as === "section" && <section class={classNames}><slot /></section>}
{as === "article" && <article class={classNames}><slot /></article>}
{as === "main" && <main class={classNames}><slot /></main>}
{as === "aside" && <aside class={classNames}><slot /></aside>}
{as === "nav" && <nav class={classNames}><slot /></nav>}

<style>
  .container {
    display: flex;
    max-width: var(--container-width);
    margin: 0 auto;
    padding: 0 var(--s2);
  }

  .row {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
  }

  .column {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
</style>
