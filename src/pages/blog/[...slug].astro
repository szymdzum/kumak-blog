---
import { type CollectionEntry, getCollection } from 'astro:content';
import { render } from 'astro:content';
// import ArrowLeft from "lucide-react/icons/arrow-left";

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await render(post);

// Format the post data to match the template
const formattedPost = {
  title: post.data.title,
  date: post.data.pubDate?.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }) || '',
  tags: [] as string[],
  content: '',  // Will be rendered by <Content />
};
---

<article class="blog-post">
  <div class="container">


    <div class="post-container">
      <h1>{formattedPost.title}</h1>

      <div class="post-meta">
        <time datetime={post.data.pubDate?.toISOString()}>{formattedPost.date}</time>
        <span class="separator">â€¢</span>
        <div class="tags">
          {formattedPost.tags.map((tag: string) => (
            <span class="tag">{tag}</span>
          ))}
        </div>
      </div>

      <div class="post-content">
            <a href="/blog" class="back-link">
      <!-- <ArrowLeft /> -->
      Back to Blog
    </a>
        <Content />
      </div>
    </div>
  </div>
</article>

<style>
  .blog-post {
    padding-block: var(--s2);
  }

  .container {
    max-width: var(--container-width);
    margin-inline: auto;
    padding-inline: var(--s1);
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    margin-bottom: var(--s2);
    padding: var(--s-1) var(--s1);
    font-size: 0.875rem;
    color: inherit;
    text-decoration: none;
    border-radius: var(--radius);
    background-color: transparent;
    transition: background-color 0.2s;
  }

  .back-link:hover {
    background-color: rgba(var(--foreground-rgb), 0.05);
  }

  .back-link :global(svg) {
    width: 1rem;
    height: 1rem;
    margin-right: 0.5rem;
  }

  .post-container {
    max-width: 48rem;
    margin-inline: auto;
  }

  h1 {
    margin-bottom: var(--s1);
    font-size: var(--s3);
    font-weight: 700;
    letter-spacing: -0.02em;
    line-height: 1.1;
  }

  @media (min-width: 640px) {
    h1 {
      font-size: var(--s4);
    }
  }

  .post-meta {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: var(--s2);
    font-size: 0.875rem;
    color: var(--color-muted);
  }

  .separator {
    display: inline-block;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 500;
    border-radius: var(--radius-full);
    background-color: var(--color-secondary-bg);
    color: var(--color-secondary-fg);
  }
</style>
